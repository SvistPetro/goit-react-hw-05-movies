{"version":3,"file":"static/js/76.07b3e281.chunk.js","mappings":"sQACA,GAAgB,MAAQ,oBAAoB,QAAU,sBAAsB,KAAO,mBAAmB,KAAO,oB,SC+D7G,EAxDa,WACT,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAA4BC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GACxBI,GAA0BL,EAAAA,EAAAA,UAAS,MAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAAoCT,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA5CE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,IAEhCG,EAAAA,EAAAA,YAAU,WACN,GAAKhB,EAAL,CAEA,IAAMiB,EAAe,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEI,OAFJF,EAAAC,KAAA,EAEhBT,GAAc,GAAMQ,EAAAE,KAAA,GAEDC,EAAAA,EAAAA,IAAiB1B,GAAS,KAAD,EAAtCsB,EAAIC,EAAAI,KACVpB,EAAUe,EAAKM,KAAKC,MAAMN,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,SAG1BZ,EAAQY,EAAAO,IAAQ,QAGK,OAHLP,EAAAC,KAAA,GAGhBT,GAAc,GAAOQ,EAAAQ,OAAA,6BAAAR,EAAAS,OAAA,GAAAX,EAAA,wBAE5B,kBAboB,OAAAH,EAAAe,MAAA,KAAAC,UAAA,KAerBjB,GAjBoB,CAkBxB,GAAE,CAACjB,IAIH,OACImC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACKtB,IAAcuB,EAAAA,EAAAA,KAACC,EAAAA,EAAM,IACrB5B,IAAS2B,EAAAA,EAAAA,KAAA,KAAAD,SAAG,6BACbC,EAAAA,EAAAA,KAAA,MAAIE,UAAWC,EAAAA,KAASJ,SACR,OAAX9B,IAAyB,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQmC,QAAS,EAAInC,EAAOoC,KAAI,SAAAC,GAAwC,IAArCC,EAAYD,EAAZC,aAAcC,EAAIF,EAAJE,KAAMC,EAASH,EAATG,UACvE,OACIX,EAAAA,EAAAA,MAAA,MAAII,UAAWC,EAAAA,KAASJ,SAAA,EACpBC,EAAAA,EAAAA,KAAA,OAAKE,UAAWC,EAAAA,IACZO,IACAH,EAAa,kCAADI,OACsBJ,GAb3C,8DAeSK,IAAKJ,EACLK,MAAO,IACPC,OAAQ,OAEZd,EAAAA,EAAAA,KAAA,KAAGE,UAAWC,EAAAA,MAAUJ,SAAES,KAC1BV,EAAAA,EAAAA,MAAA,KAAGI,UAAWC,EAAAA,QAAYJ,SAAA,CAAC,cAAYU,QAXbM,EAAAA,EAAAA,MActC,KAAMf,EAAAA,EAAAA,KAAA,OAAAD,SAAK,gDAI3B,C,uDC9DO,IAAMiB,EACX,mECmBSD,EAAS,WAGlB,IAHiC,IAAdE,EAAIpB,UAAAO,OAAA,QAAAc,IAAArB,UAAA,GAAAA,UAAA,GAAG,GACtBsB,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWN,IAC3CA,KACLE,GAAMH,EAA0B,GAAdI,EAAMH,IAE1B,OAAOE,CACT,C","sources":["webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","../node_modules/nanoid/url-alphabet/index.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"actor\":\"Cast_actor__tWtXy\",\"charter\":\"Cast_charter__m1vWg\",\"list\":\"Cast_list__GlWio\",\"item\":\"Cast_item__a0CDL\"};","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { requestMovieCast } from 'services/api';\nimport { Loader } from 'components/Loader/Loader';\nimport { nanoid } from 'nanoid';\nimport css from './Cast.module.css';\n\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [actors, setActors] = useState(null);\n    const [error, setError] = useState(null);\n    const [isLoadMore, setIsLoadMore] = useState(false);\n\n    useEffect(() => {\n        if (!movieId) return;\n\n        const fetchMoviesCast = async () => {\n            try {\n                setIsLoadMore(true);\n\n                const resp = await requestMovieCast(movieId);\n                setActors(resp.data.cast);\n            }\n            catch (error) {\n                setError(error);\n            }\n            finally {\n                setIsLoadMore(false);\n            }\n        };\n        \n        fetchMoviesCast();\n    },[movieId])\n\n    const defaultImg = 'https://via.placeholder.com/200x300?text=No+Image+Available';\n\n    return (\n        <div>\n            {isLoadMore && <Loader />}\n            {error && <p>Something went wrong...</p>}\n            <ul className={css.list}>\n                {actors !== null && actors?.length > 0? (actors.map(({ profile_path, name, character }) => {\n                    return (\n                        <li className={css.item} key={nanoid()}> \n                            <img className={css.img} \n                                src={\n                                profile_path? \n                                `https://image.tmdb.org/t/p/w200${profile_path}` \n                                : defaultImg} \n                                alt={name} \n                                width={208} \n                                height={300}\n                            />\n                            <p className={css.actor}>{name}</p>\n                            <p className={css.charter}>Character: {character}</p>\n                        </li>\n                    );\n                })) : <div>We don't have any casts for this movie.</div>}\n            </ul>\n        </div>\n    )\n}\n\nexport default Cast;","export const urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\n","import { urlAlphabet } from './url-alphabet/index.js'\nexport { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    id += urlAlphabet[bytes[size] & 63]\n  }\n  return id\n}\n"],"names":["movieId","useParams","_useState","useState","_useState2","_slicedToArray","actors","setActors","_useState3","_useState4","error","setError","_useState5","_useState6","isLoadMore","setIsLoadMore","useEffect","fetchMoviesCast","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","resp","_context","prev","next","requestMovieCast","sent","data","cast","t0","finish","stop","apply","arguments","_jsxs","children","_jsx","Loader","className","css","length","map","_ref2","profile_path","name","character","src","concat","alt","width","height","nanoid","urlAlphabet","size","undefined","id","bytes","crypto","getRandomValues","Uint8Array"],"sourceRoot":""}